{"version":3,"sources":["../../src/rules/noUndefinedTypes.js"],"names":["extraTypes","stripPseudoTypes","str","replace","context","node","report","settings","sourceCode","utils","scopeManager","globalScope","definedTypes","options","definedPreferredTypes","preferredTypes","mode","Object","keys","length","_","values","map","preferredType","undefined","reportSettings","replacement","filter","typedefDeclarations","getAllComments","comment","value","startsWith","commentNode","flatMap","doc","tags","tag","isNamepathDefiningTag","name","ancestorNodes","currentScope","acquire","block","type","push","upper","templateTags","ancestorNode","jsdoc","jsdocUtils","filterTags","getPresentTags","classJsdoc","getClassJsdoc","concat","closureGenericTypes","parseClosureTemplateTag","cjsOrESMScope","childScopes","allDefinedTypes","Set","variables","jsdocTagsWithPossibleType","tagMightHaveTypePosition","forEach","parsedType","has","includes","markVariableAsUsed","iterateAllJsdocs","meta","docs","description","url","schema","additionalProperties","properties","items"],"mappings":"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","sourcesContent":["import {\n  parse as parseType, traverse,\n} from 'jsdoctypeparser';\nimport _ from 'lodash';\nimport {\n  getJSDocComment,\n} from '../eslint/getJSDocComment';\nimport iterateJsdoc, {\n  parseComment,\n} from '../iterateJsdoc';\nimport jsdocUtils from '../jsdocUtils';\n\nconst extraTypes = [\n  'null', 'undefined', 'void', 'string', 'boolean', 'object',\n  'function', 'symbol',\n  'number', 'bigint', 'NaN', 'Infinity',\n  'any', '*',\n  'Array', 'Object', 'RegExp', 'Date', 'Function',\n];\n\nconst stripPseudoTypes = (str) => {\n  return str && str.replace(/(?:\\.|<>|\\.<>|\\[\\])$/u, '');\n};\n\nexport default iterateJsdoc(({\n  context,\n  node,\n  report,\n  settings,\n  sourceCode,\n  utils,\n}) => {\n  const {scopeManager} = sourceCode;\n  const {globalScope} = scopeManager;\n\n  const {definedTypes = []} = context.options[0] || {};\n\n  let definedPreferredTypes = [];\n  const {preferredTypes, mode} = settings;\n  if (Object.keys(preferredTypes).length) {\n    // Replace `_.values` with `Object.values` when we may start requiring Node 7+\n    definedPreferredTypes = _.values(preferredTypes).map((preferredType) => {\n      if (typeof preferredType === 'string') {\n        // May become an empty string but will be filtered out below\n        return stripPseudoTypes(preferredType);\n      }\n      if (!preferredType) {\n        return undefined;\n      }\n      if (typeof preferredType !== 'object') {\n        utils.reportSettings(\n          'Invalid `settings.jsdoc.preferredTypes`. Values must be falsy, a string, or an object.',\n        );\n      }\n\n      return stripPseudoTypes(preferredType.replacement);\n    }).filter((preferredType) => {\n      return preferredType;\n    });\n  }\n\n  const typedefDeclarations = _(context.getAllComments())\n    .filter((comment) => {\n      return comment.value.startsWith('*');\n    })\n    .map((commentNode) => {\n      return parseComment(commentNode, '');\n    })\n    .flatMap((doc) => {\n      return (doc.tags || []).filter(({tag}) => {\n        return utils.isNamepathDefiningTag(tag);\n      });\n    })\n    .map((tag) => {\n      return tag.name;\n    })\n    .value();\n\n  const ancestorNodes = [];\n  let currentScope = scopeManager.acquire(node);\n\n  while (currentScope && currentScope.block.type !== 'Program') {\n    ancestorNodes.push(currentScope.block);\n    currentScope = currentScope.upper;\n  }\n\n  // `currentScope` may be `null` or `Program`, so in such a case,\n  //  we look to present tags instead\n  let templateTags = ancestorNodes.length ?\n    _(ancestorNodes).flatMap((ancestorNode) => {\n      const commentNode = getJSDocComment(sourceCode, ancestorNode, settings);\n      if (!commentNode) {\n        return [];\n      }\n\n      const jsdoc = parseComment(commentNode, '');\n\n      return jsdocUtils.filterTags(jsdoc.tags, (tag) => {\n        return 'template' === tag.tag;\n      });\n    }).value() :\n    utils.getPresentTags('template');\n\n  const classJsdoc = utils.getClassJsdoc();\n  if (classJsdoc?.tags) {\n    templateTags = templateTags.concat(\n      classJsdoc.tags\n        .filter(({tag}) => {\n          return tag === 'template';\n        }),\n    );\n  }\n\n  const closureGenericTypes = _.flatMap(templateTags, (tag) => {\n    return utils.parseClosureTemplateTag(tag);\n  });\n\n  // In modules, including Node, there is a global scope at top with the\n  //  Program scope inside\n  const cjsOrESMScope = globalScope.childScopes[0]?.block.type === 'Program';\n\n  const allDefinedTypes = new Set(globalScope.variables.map(({name}) => {\n    return name;\n  })\n\n    // If the file is a module, concat the variables from the module scope.\n    .concat(\n      cjsOrESMScope ?\n        _.flatMap(globalScope.childScopes, ({variables}) => {\n          return variables;\n        }, []).map(({name}) => {\n          return name;\n        }) : [],\n    )\n    .concat(extraTypes)\n    .concat(typedefDeclarations)\n    .concat(definedTypes)\n    .concat(definedPreferredTypes)\n    .concat(settings.mode === 'jsdoc' ? [] : closureGenericTypes));\n\n  const jsdocTagsWithPossibleType = utils.filterTags(({tag}) => {\n    return utils.tagMightHaveTypePosition(tag);\n  });\n\n  jsdocTagsWithPossibleType.forEach((tag) => {\n    let parsedType;\n\n    try {\n      parsedType = parseType(tag.type, {mode});\n    } catch {\n      // On syntax error, will be handled by valid-types.\n      return;\n    }\n\n    traverse(parsedType, ({type, name}) => {\n      if (type === 'NAME') {\n        if (!allDefinedTypes.has(name)) {\n          report(`The type '${name}' is undefined.`, null, tag);\n        } else if (!_.includes(extraTypes, name)) {\n          context.markVariableAsUsed(name);\n        }\n      }\n    });\n  });\n}, {\n  iterateAllJsdocs: true,\n  meta: {\n    docs: {\n      description: 'Checks that types in jsdoc comments are defined.',\n      url: 'https://github.com/gajus/eslint-plugin-jsdoc#eslint-plugin-jsdoc-rules-no-undefined-types',\n    },\n    schema: [\n      {\n        additionalProperties: false,\n        properties: {\n          definedTypes: {\n            items: {\n              type: 'string',\n            },\n            type: 'array',\n          },\n        },\n        type: 'object',\n      },\n    ],\n    type: 'suggestion',\n  },\n});\n"],"file":"noUndefinedTypes.js"}