{"version":3,"sources":["../../src/rules/noBadBlocks.js"],"names":["commentRegexp","context","sourceCode","allComments","makeReport","ignore","options","nonJsdocNodes","filter","comment","commentText","getText","test","tags","slice","length","some","tag","includes","forEach","node","report","fix","fixer","text","replaceText","replace","checkFile","meta","docs","description","url","fixable","schema","additionalProperties","properties","items","type"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA,MAAMA,aAAa,GAAG,aAAtB;;eAEe,2BAAa,CAAC;AAC3BC,EAAAA,OAD2B;AAE3BC,EAAAA,UAF2B;AAG3BC,EAAAA,WAH2B;AAI3BC,EAAAA;AAJ2B,CAAD,KAKtB;AACJ,QAAM,CACJ;AACEC,IAAAA,MAAM,GAAG,CACP,UADO,EAEP,iBAFO,EAGP,WAHO,EAIP,YAJO;AADX,MAOI,EARA,IASFJ,OAAO,CAACK,OATZ;AAUA,QAAMC,aAAa,GAAGJ,WAAW,CAACK,MAAZ,CAAoBC,OAAD,IAAa;AACpD,UAAMC,WAAW,GAAGR,UAAU,CAACS,OAAX,CAAmBF,OAAnB,CAApB;;AACA,QAAI,CAACT,aAAa,CAACY,IAAd,CAAmBF,WAAnB,CAAL,EAAsC;AACpC,aAAO,KAAP;AACD;;AAED,UAAM,CAAC;AAACG,MAAAA;AAAD,KAAD,IAAW,4BAAe,GAAEH,WAAW,CAACI,KAAZ,CAAkB,CAAlB,EAAqB,CAArB,CAAwB,IAAGJ,WAAW,CAACI,KAAZ,CAAkB,CAAlB,CAAqB,EAAjE,CAAjB;AAEA,WAAOD,IAAI,CAACE,MAAL,IAAe,CAACF,IAAI,CAACG,IAAL,CAAU,CAAC;AAACC,MAAAA;AAAD,KAAD,KAAW;AAC1C,aAAOZ,MAAM,CAACa,QAAP,CAAgBD,GAAhB,CAAP;AACD,KAFsB,CAAvB;AAGD,GAXqB,CAAtB;;AAYA,MAAI,CAACV,aAAa,CAACQ,MAAnB,EAA2B;AACzB;AACD;;AAEDR,EAAAA,aAAa,CAACY,OAAd,CAAuBC,IAAD,IAAU;AAC9B,UAAMC,MAAM,GAAGjB,UAAU,CAACH,OAAD,EAAUmB,IAAV,CAAzB;;AAEA,UAAME,GAAG,GAAIC,KAAD,IAAW;AACrB,YAAMC,IAAI,GAAGtB,UAAU,CAACS,OAAX,CAAmBS,IAAnB,CAAb;AAEA,aAAOG,KAAK,CAACE,WAAN,CAAkBL,IAAlB,EAAwBI,IAAI,CAACE,OAAL,CAAa,IAAb,EAAmB,KAAnB,CAAxB,CAAP;AACD,KAJD;;AAKAL,IAAAA,MAAM,CAAC,0DAAD,EAA6DC,GAA7D,CAAN;AACD,GATD;AAUD,CA1Cc,EA0CZ;AACDK,EAAAA,SAAS,EAAE,IADV;AAEDC,EAAAA,IAAI,EAAE;AACJC,IAAAA,IAAI,EAAE;AACJC,MAAAA,WAAW,EAAE,kGADT;AAEJC,MAAAA,GAAG,EAAE;AAFD,KADF;AAKJC,IAAAA,OAAO,EAAE,MALL;AAMJC,IAAAA,MAAM,EAAE,CACN;AACEC,MAAAA,oBAAoB,EAAE,KADxB;AAEEC,MAAAA,UAAU,EAAE;AACV9B,QAAAA,MAAM,EAAE;AACN+B,UAAAA,KAAK,EAAE;AACLC,YAAAA,IAAI,EAAE;AADD,WADD;AAINA,UAAAA,IAAI,EAAE;AAJA;AADE,OAFd;AAUEA,MAAAA,IAAI,EAAE;AAVR,KADM,CANJ;AAoBJA,IAAAA,IAAI,EAAE;AApBF;AAFL,CA1CY,C","sourcesContent":["import commentParser from 'comment-parser';\nimport iterateJsdoc from '../iterateJsdoc';\n\nconst commentRegexp = /^\\/\\*(?!\\*)/;\n\nexport default iterateJsdoc(({\n  context,\n  sourceCode,\n  allComments,\n  makeReport,\n}) => {\n  const [\n    {\n      ignore = [\n        'ts-check',\n        'ts-expect-error',\n        'ts-ignore',\n        'ts-nocheck',\n      ],\n    } = {},\n  ] = context.options;\n  const nonJsdocNodes = allComments.filter((comment) => {\n    const commentText = sourceCode.getText(comment);\n    if (!commentRegexp.test(commentText)) {\n      return false;\n    }\n\n    const [{tags}] = commentParser(`${commentText.slice(0, 2)}*${commentText.slice(2)}`);\n\n    return tags.length && !tags.some(({tag}) => {\n      return ignore.includes(tag);\n    });\n  });\n  if (!nonJsdocNodes.length) {\n    return;\n  }\n\n  nonJsdocNodes.forEach((node) => {\n    const report = makeReport(context, node);\n\n    const fix = (fixer) => {\n      const text = sourceCode.getText(node);\n\n      return fixer.replaceText(node, text.replace('/*', '/**'));\n    };\n    report('Expected JSDoc-like comment to begin with two asterisks.', fix);\n  });\n}, {\n  checkFile: true,\n  meta: {\n    docs: {\n      description: 'This rule checks for multi-line-style comments which fail to meet the criteria of a jsdoc block.',\n      url: 'https://github.com/gajus/eslint-plugin-jsdoc#eslint-plugin-jsdoc-rules-no-bad-blocks',\n    },\n    fixable: 'code',\n    schema: [\n      {\n        additionalProperties: false,\n        properties: {\n          ignore: {\n            items: {\n              type: 'string',\n            },\n            type: 'array',\n          },\n        },\n        type: 'object',\n      },\n    ],\n    type: 'layout',\n  },\n});\n"],"file":"noBadBlocks.js"}