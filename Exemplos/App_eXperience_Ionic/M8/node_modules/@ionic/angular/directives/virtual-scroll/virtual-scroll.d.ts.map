{"version":3,"file":"virtual-scroll.d.ts","sources":["virtual-scroll.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, IterableDiffers, NgZone, SimpleChanges, TrackByFunction } from '@angular/core';\nimport { FooterHeightFn, HeaderFn, HeaderHeightFn, ItemHeightFn } from '@ionic/core';\nimport { VirtualFooter } from './virtual-footer';\nimport { VirtualHeader } from './virtual-header';\nimport { VirtualItem } from './virtual-item';\nexport declare interface IonVirtualScroll {\n    /**\n     * It is important to provide this\n     * if virtual item height will be significantly larger than the default\n     * The approximate height of each virtual item template's cell.\n     * This dimension is used to help determine how many cells should\n     * be created when initialized, and to help calculate the height of\n     * the scrollable area. This height value can only use `px` units.\n     * Note that the actual rendered size of each cell comes from the\n     * app's CSS, whereas this approximation is used to help calculate\n     * initial dimensions before the item has been rendered.\n     */\n    approxItemHeight: number;\n    /**\n     * The approximate height of each header template's cell.\n     * This dimension is used to help determine how many cells should\n     * be created when initialized, and to help calculate the height of\n     * the scrollable area. This height value can only use `px` units.\n     * Note that the actual rendered size of each cell comes from the\n     * app's CSS, whereas this approximation is used to help calculate\n     * initial dimensions before the item has been rendered.\n     */\n    approxHeaderHeight: number;\n    /**\n     * The approximate width of each footer template's cell.\n     * This dimension is used to help determine how many cells should\n     * be created when initialized, and to help calculate the height of\n     * the scrollable area. This height value can only use `px` units.\n     * Note that the actual rendered size of each cell comes from the\n     * app's CSS, whereas this approximation is used to help calculate\n     * initial dimensions before the item has been rendered.\n     */\n    approxFooterHeight: number;\n    /**\n     * Section headers and the data used within its given\n     * template can be dynamically created by passing a function to `headerFn`.\n     * For example, a large list of contacts usually has dividers between each\n     * letter in the alphabet. App's can provide their own custom `headerFn`\n     * which is called with each record within the dataset. The logic within\n     * the header function can decide if the header template should be used,\n     * and what data to give to the header template. The function must return\n     * `null` if a header cell shouldn't be created.\n     */\n    headerFn?: HeaderFn;\n    /**\n     * Section footers and the data used within its given\n     * template can be dynamically created by passing a function to `footerFn`.\n     * The logic within the footer function can decide if the footer template\n     * should be used, and what data to give to the footer template. The function\n     * must return `null` if a footer cell shouldn't be created.\n     */\n    footerFn?: HeaderFn;\n    /**\n     * The data that builds the templates within the virtual scroll.\n     * It's important to note that when this data has changed, then the\n     * entire virtual scroll is reset, which is an expensive operation and\n     * should be avoided if possible.\n     */\n    items?: any[] | null;\n    /**\n     * An optional function that maps each item within their height.\n     * When this function is provided, heavy optimizations and fast path can be taked by\n     * `ion-virtual-scroll` leading to massive performance improvements.\n     *\n     * This function allows to skip all DOM reads, which can be Doing so leads\n     * to massive performance\n     */\n    itemHeight?: ItemHeightFn;\n    /**\n     * An optional function that maps each item header within their height.\n     */\n    headerHeight?: HeaderHeightFn;\n    /**\n     * An optional function that maps each item footer within their height.\n     */\n    footerHeight?: FooterHeightFn;\n    /**\n     * Same as `ngForTrackBy` which can be used on `ngFor`.\n     */\n    trackBy: TrackByFunction<any>;\n    /**\n     * This method marks the tail the items array as dirty, so they can be re-rendered.  It's equivalent to calling:  ```js    * virtualScroll.checkRange(lastItemLen, items.length - lastItemLen);    * ```\n     */\n    'checkEnd': () => void;\n    /**\n     * This method marks a subset of items as dirty, so they can be re-rendered. Items should be marked as dirty any time the content or their style changes.  The subset of items to be updated can are specifing by an offset and a length.\n     */\n    'checkRange': (offset: number, len?: number) => void;\n    /**\n     * Returns the position of the virtual item at the given index.\n     */\n    'positionForItem': (index: number) => Promise<number>;\n}\nexport declare class IonVirtualScroll {\n    private z;\n    private iterableDiffers;\n    private differ?;\n    private el;\n    private refMap;\n    itmTmp: VirtualItem;\n    hdrTmp: VirtualHeader;\n    ftrTmp: VirtualFooter;\n    constructor(z: NgZone, iterableDiffers: IterableDiffers, elementRef: ElementRef);\n    ngOnChanges(changes: SimpleChanges): void;\n    ngDoCheck(): void;\n    private nodeRender;\n    private getComponent;\n}\n"]}