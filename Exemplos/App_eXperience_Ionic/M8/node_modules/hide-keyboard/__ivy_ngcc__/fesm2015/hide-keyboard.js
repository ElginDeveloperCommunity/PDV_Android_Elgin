import { Directive, ElementRef, HostListener, NgModule } from '@angular/core';

import * as ɵngcc0 from '@angular/core';
class HideKeyboardDirective {
    constructor(el) {
        this.el = el;
        this.focusTimeout = 500;
        this.readonly = true;
        this.setReadOnly(this.readonly);
        setTimeout(() => {
            this.el.nativeElement.focus();
        }, this.focusTimeout);
    }
    onFocus() {
        this.readonly = true;
        this.setReadOnly(this.readonly);
        if (!this.readonly) {
            this.setReadOnly(!this.readonly);
        }
        setTimeout(() => {
            this.readonly = false;
            this.setReadOnly(this.readonly);
        }, 100);
    }
    ;
    onClick(input) {
        this.readonly = true;
        this.setReadOnly(this.readonly);
        setTimeout(() => {
            this.readonly = false;
            this.setReadOnly(this.readonly);
            this.el.nativeElement.focus();
        }, this.focusTimeout);
    }
    setReadOnly(value) {
        this.el.nativeElement.readOnly = value;
        if (this.el.nativeElement.children && this.el.nativeElement.children.length > 0) {
            this.el.nativeElement.children[0].readOnly = value;
            if (this.el.nativeElement.children.length > 1) {
                this.el.nativeElement.children[1].readOnly = value;
            }
        }
        ;
    }
    ;
}
HideKeyboardDirective.ɵfac = function HideKeyboardDirective_Factory(t) { return new (t || HideKeyboardDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
HideKeyboardDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: HideKeyboardDirective, selectors: [["", "hideKeyboard", ""]], hostBindings: function HideKeyboardDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("focus", function HideKeyboardDirective_focus_HostBindingHandler() { return ctx.onFocus(); })("click", function HideKeyboardDirective_click_HostBindingHandler($event) { return ctx.onClick($event.target); });
    } } });
HideKeyboardDirective.ctorParameters = () => [
    { type: ElementRef }
];
HideKeyboardDirective.propDecorators = {
    onFocus: [{ type: HostListener, args: ['focus',] }],
    onClick: [{ type: HostListener, args: ['click', ['$event.target'],] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HideKeyboardDirective, [{
        type: Directive,
        args: [{
                selector: '[hideKeyboard]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { onFocus: [{
            type: HostListener,
            args: ['focus']
        }], onClick: [{
            type: HostListener,
            args: ['click', ['$event.target']]
        }] }); })();

class HideKeyboardModule {
    static forRoot() {
        return {
            ngModule: HideKeyboardModule,
            providers: []
        };
    }
}
HideKeyboardModule.ɵfac = function HideKeyboardModule_Factory(t) { return new (t || HideKeyboardModule)(); };
HideKeyboardModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: HideKeyboardModule });
HideKeyboardModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HideKeyboardModule, [{
        type: NgModule,
        args: [{
                declarations: [HideKeyboardDirective],
                exports: [HideKeyboardDirective]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(HideKeyboardModule, { declarations: [HideKeyboardDirective], exports: [HideKeyboardDirective] }); })();

/*
 * Public API Surface of hide-keyboard
 */

/**
 * Generated bundle index. Do not edit.
 */

export { HideKeyboardDirective, HideKeyboardModule };

//# sourceMappingURL=hide-keyboard.js.map