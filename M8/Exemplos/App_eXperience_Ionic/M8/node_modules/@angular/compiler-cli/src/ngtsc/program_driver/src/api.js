/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@angular/compiler-cli/src/ngtsc/program_driver/src/api", ["require", "exports"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateMode = exports.NgOriginalFile = void 0;
    exports.NgOriginalFile = Symbol('NgOriginalFile');
    var UpdateMode;
    (function (UpdateMode) {
        /**
         * A complete update creates a completely new overlay of type-checking code on top of the user's
         * original program, which doesn't include type-checking code from previous calls to
         * `updateFiles`.
         */
        UpdateMode[UpdateMode["Complete"] = 0] = "Complete";
        /**
         * An incremental update changes the contents of some files in the type-checking program without
         * reverting any prior changes.
         */
        UpdateMode[UpdateMode["Incremental"] = 1] = "Incremental";
    })(UpdateMode = exports.UpdateMode || (exports.UpdateMode = {}));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29tcGlsZXItY2xpL3NyYy9uZ3RzYy9wcm9ncmFtX2RyaXZlci9zcmMvYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRzs7Ozs7Ozs7Ozs7OztJQWtCVSxRQUFBLGNBQWMsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQXdDdkQsSUFBWSxVQWFYO0lBYkQsV0FBWSxVQUFVO1FBQ3BCOzs7O1dBSUc7UUFDSCxtREFBUSxDQUFBO1FBRVI7OztXQUdHO1FBQ0gseURBQVcsQ0FBQTtJQUNiLENBQUMsRUFiVyxVQUFVLEdBQVYsa0JBQVUsS0FBVixrQkFBVSxRQWFyQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQgKiBhcyB0cyBmcm9tICd0eXBlc2NyaXB0JztcbmltcG9ydCB7QWJzb2x1dGVGc1BhdGh9IGZyb20gJy4uLy4uL2ZpbGVfc3lzdGVtJztcblxuZXhwb3J0IGludGVyZmFjZSBGaWxlVXBkYXRlIHtcbiAgLyoqXG4gICAqIFRoZSBzb3VyY2UgZmlsZSB0ZXh0LlxuICAgKi9cbiAgbmV3VGV4dDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBSZXByZXNlbnRzIHRoZSBzb3VyY2UgZmlsZSBmcm9tIHRoZSBvcmlnaW5hbCBwcm9ncmFtIHRoYXQgaXMgYmVpbmcgdXBkYXRlZC4gSWYgdGhlIGZpbGUgdXBkYXRlXG4gICAqIHRhcmdldHMgYSBzaGltIGZpbGUgdGhlbiB0aGlzIGlzIG51bGwsIGFzIHNoaW0gZmlsZXMgZG8gbm90IGhhdmUgYW4gYXNzb2NpYXRlZCBvcmlnaW5hbCBmaWxlLlxuICAgKi9cbiAgb3JpZ2luYWxGaWxlOiB0cy5Tb3VyY2VGaWxlfG51bGw7XG59XG5cbmV4cG9ydCBjb25zdCBOZ09yaWdpbmFsRmlsZSA9IFN5bWJvbCgnTmdPcmlnaW5hbEZpbGUnKTtcblxuLyoqXG4gKiBJZiBhbiB1cGRhdGVkIGZpbGUgaGFzIGFuIGFzc29jaWF0ZWQgb3JpZ2luYWwgc291cmNlIGZpbGUsIHRoZW4gdGhlIG9yaWdpbmFsIHNvdXJjZSBmaWxlXG4gKiBpcyBhdHRhY2hlZCB0byB0aGUgdXBkYXRlZCBmaWxlIHVzaW5nIHRoZSBgTmdPcmlnaW5hbEZpbGVgIHN5bWJvbC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBNYXliZVNvdXJjZUZpbGVXaXRoT3JpZ2luYWxGaWxlIGV4dGVuZHMgdHMuU291cmNlRmlsZSB7XG4gIFtOZ09yaWdpbmFsRmlsZV0/OiB0cy5Tb3VyY2VGaWxlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFByb2dyYW1Ecml2ZXIge1xuICAvKipcbiAgICogV2hldGhlciB0aGlzIHN0cmF0ZWd5IHN1cHBvcnRzIG1vZGlmeWluZyB1c2VyIGZpbGVzIChpbmxpbmUgbW9kaWZpY2F0aW9ucykgaW4gYWRkaXRpb24gdG9cbiAgICogbW9kaWZ5aW5nIHR5cGUtY2hlY2tpbmcgc2hpbXMuXG4gICAqL1xuICByZWFkb25seSBzdXBwb3J0c0lubGluZU9wZXJhdGlvbnM6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlIHRoZSBsYXRlc3QgdmVyc2lvbiBvZiB0aGUgcHJvZ3JhbSwgY29udGFpbmluZyBhbGwgdGhlIHVwZGF0ZXMgbWFkZSB0aHVzIGZhci5cbiAgICovXG4gIGdldFByb2dyYW0oKTogdHMuUHJvZ3JhbTtcblxuICAvKipcbiAgICogSW5jb3Jwb3JhdGUgYSBzZXQgb2YgY2hhbmdlcyB0byBlaXRoZXIgYXVnbWVudCBvciBjb21wbGV0ZWx5IHJlcGxhY2UgdGhlIHR5cGUtY2hlY2tpbmcgY29kZVxuICAgKiBpbmNsdWRlZCBpbiB0aGUgdHlwZS1jaGVja2luZyBwcm9ncmFtLlxuICAgKi9cbiAgdXBkYXRlRmlsZXMoY29udGVudHM6IE1hcDxBYnNvbHV0ZUZzUGF0aCwgRmlsZVVwZGF0ZT4sIHVwZGF0ZU1vZGU6IFVwZGF0ZU1vZGUpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZSBhIHN0cmluZyB2ZXJzaW9uIGZvciBhIGdpdmVuIGB0cy5Tb3VyY2VGaWxlYCwgd2hpY2ggbXVjaCBjaGFuZ2Ugd2hlbiB0aGUgY29udGVudHMgb2ZcbiAgICogdGhlIGZpbGUgaGF2ZSBjaGFuZ2VkLlxuICAgKlxuICAgKiBJZiB0aGlzIG1ldGhvZCBpcyBwcmVzZW50LCB0aGUgY29tcGlsZXIgd2lsbCB1c2UgdGhlc2UgdmVyc2lvbnMgaW4gYWRkaXRpb24gdG8gb2JqZWN0IGlkZW50aXR5XG4gICAqIGZvciBgdHMuU291cmNlRmlsZWBzIHRvIGRldGVybWluZSB3aGF0J3MgY2hhbmdlZCBiZXR3ZWVuIHR3byBpbmNyZW1lbnRhbCBwcm9ncmFtcy4gVGhpcyBpc1xuICAgKiB2YWx1YWJsZSBmb3Igc29tZSBjbGllbnRzIChzdWNoIGFzIHRoZSBMYW5ndWFnZSBTZXJ2aWNlKSB0aGF0IHRyZWF0IGB0cy5Tb3VyY2VGaWxlYHMgYXMgbXV0YWJsZVxuICAgKiBvYmplY3RzLlxuICAgKi9cbiAgZ2V0U291cmNlRmlsZVZlcnNpb24/KHNmOiB0cy5Tb3VyY2VGaWxlKTogc3RyaW5nO1xufVxuXG5leHBvcnQgZW51bSBVcGRhdGVNb2RlIHtcbiAgLyoqXG4gICAqIEEgY29tcGxldGUgdXBkYXRlIGNyZWF0ZXMgYSBjb21wbGV0ZWx5IG5ldyBvdmVybGF5IG9mIHR5cGUtY2hlY2tpbmcgY29kZSBvbiB0b3Agb2YgdGhlIHVzZXInc1xuICAgKiBvcmlnaW5hbCBwcm9ncmFtLCB3aGljaCBkb2Vzbid0IGluY2x1ZGUgdHlwZS1jaGVja2luZyBjb2RlIGZyb20gcHJldmlvdXMgY2FsbHMgdG9cbiAgICogYHVwZGF0ZUZpbGVzYC5cbiAgICovXG4gIENvbXBsZXRlLFxuXG4gIC8qKlxuICAgKiBBbiBpbmNyZW1lbnRhbCB1cGRhdGUgY2hhbmdlcyB0aGUgY29udGVudHMgb2Ygc29tZSBmaWxlcyBpbiB0aGUgdHlwZS1jaGVja2luZyBwcm9ncmFtIHdpdGhvdXRcbiAgICogcmV2ZXJ0aW5nIGFueSBwcmlvciBjaGFuZ2VzLlxuICAgKi9cbiAgSW5jcmVtZW50YWwsXG59XG4iXX0=