/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@angular/compiler-cli/src/ngtsc/metadata/src/api", ["require", "exports"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MetaType = void 0;
    var MetaType;
    (function (MetaType) {
        MetaType[MetaType["Pipe"] = 0] = "Pipe";
        MetaType[MetaType["Directive"] = 1] = "Directive";
    })(MetaType = exports.MetaType || (exports.MetaType = {}));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29tcGlsZXItY2xpL3NyYy9uZ3RzYy9tZXRhZGF0YS9zcmMvYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRzs7Ozs7Ozs7Ozs7OztJQTRFSCxJQUFZLFFBR1g7SUFIRCxXQUFZLFFBQVE7UUFDbEIsdUNBQUksQ0FBQTtRQUNKLGlEQUFTLENBQUE7SUFDWCxDQUFDLEVBSFcsUUFBUSxHQUFSLGdCQUFRLEtBQVIsZ0JBQVEsUUFHbkIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtEaXJlY3RpdmVNZXRhIGFzIFQyRGlyZWN0aXZlTWV0YSwgU2NoZW1hTWV0YWRhdGF9IGZyb20gJ0Bhbmd1bGFyL2NvbXBpbGVyJztcbmltcG9ydCAqIGFzIHRzIGZyb20gJ3R5cGVzY3JpcHQnO1xuXG5pbXBvcnQge1JlZmVyZW5jZX0gZnJvbSAnLi4vLi4vaW1wb3J0cyc7XG5pbXBvcnQge0NsYXNzRGVjbGFyYXRpb259IGZyb20gJy4uLy4uL3JlZmxlY3Rpb24nO1xuXG5pbXBvcnQge0NsYXNzUHJvcGVydHlNYXBwaW5nLCBDbGFzc1Byb3BlcnR5TmFtZX0gZnJvbSAnLi9wcm9wZXJ0eV9tYXBwaW5nJztcblxuXG4vKipcbiAqIE1ldGFkYXRhIGNvbGxlY3RlZCBmb3IgYW4gYE5nTW9kdWxlYC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBOZ01vZHVsZU1ldGEge1xuICByZWY6IFJlZmVyZW5jZTxDbGFzc0RlY2xhcmF0aW9uPjtcbiAgZGVjbGFyYXRpb25zOiBSZWZlcmVuY2U8Q2xhc3NEZWNsYXJhdGlvbj5bXTtcbiAgaW1wb3J0czogUmVmZXJlbmNlPENsYXNzRGVjbGFyYXRpb24+W107XG4gIGV4cG9ydHM6IFJlZmVyZW5jZTxDbGFzc0RlY2xhcmF0aW9uPltdO1xuICBzY2hlbWFzOiBTY2hlbWFNZXRhZGF0YVtdO1xuXG4gIC8qKlxuICAgKiBUaGUgcmF3IGB0cy5FeHByZXNzaW9uYCB3aGljaCBnYXZlIHJpc2UgdG8gYGRlY2xhcmF0aW9uc2AsIGlmIG9uZSBleGlzdHMuXG4gICAqXG4gICAqIElmIHRoaXMgaXMgYG51bGxgLCB0aGVuIGVpdGhlciBubyBkZWNsYXJhdGlvbnMgZXhpc3QsIG9yIG5vIGV4cHJlc3Npb24gd2FzIGF2YWlsYWJsZSAobGlrZWx5XG4gICAqIGJlY2F1c2UgdGhlIG1vZHVsZSBjYW1lIGZyb20gYSAuZC50cyBmaWxlKS5cbiAgICovXG4gIHJhd0RlY2xhcmF0aW9uczogdHMuRXhwcmVzc2lvbnxudWxsO1xufVxuXG4vKipcbiAqIFR5cGluZyBtZXRhZGF0YSBjb2xsZWN0ZWQgZm9yIGEgZGlyZWN0aXZlIHdpdGhpbiBhbiBOZ01vZHVsZSdzIHNjb3BlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIERpcmVjdGl2ZVR5cGVDaGVja01ldGEge1xuICAvKipcbiAgICogTGlzdCBvZiBzdGF0aWMgYG5nVGVtcGxhdGVHdWFyZF94eGAgbWVtYmVycyBmb3VuZCBvbiB0aGUgRGlyZWN0aXZlJ3MgY2xhc3MuXG4gICAqIEBzZWUgYFRlbXBsYXRlR3VhcmRNZXRhYFxuICAgKi9cbiAgbmdUZW1wbGF0ZUd1YXJkczogVGVtcGxhdGVHdWFyZE1ldGFbXTtcblxuICAvKipcbiAgICogV2hldGhlciB0aGUgRGlyZWN0aXZlJ3MgY2xhc3MgaGFzIGEgc3RhdGljIG5nVGVtcGxhdGVDb250ZXh0R3VhcmQgZnVuY3Rpb24uXG4gICAqL1xuICBoYXNOZ1RlbXBsYXRlQ29udGV4dEd1YXJkOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGUgc2V0IG9mIGlucHV0IGZpZWxkcyB3aGljaCBoYXZlIGEgY29ycmVzcG9uZGluZyBzdGF0aWMgYG5nQWNjZXB0SW5wdXRUeXBlX2Agb24gdGhlXG4gICAqIERpcmVjdGl2ZSdzIGNsYXNzLiBUaGlzIGFsbG93cyBpbnB1dHMgdG8gYWNjZXB0IGEgd2lkZXIgcmFuZ2Ugb2YgdHlwZXMgYW5kIGNvZXJjZSB0aGUgaW5wdXQgdG9cbiAgICogYSBuYXJyb3dlciB0eXBlIHdpdGggYSBnZXR0ZXIvc2V0dGVyLiBTZWUgaHR0cHM6Ly9hbmd1bGFyLmlvL2d1aWRlL3RlbXBsYXRlLXR5cGVjaGVjay5cbiAgICovXG4gIGNvZXJjZWRJbnB1dEZpZWxkczogU2V0PENsYXNzUHJvcGVydHlOYW1lPjtcblxuICAvKipcbiAgICogVGhlIHNldCBvZiBpbnB1dCBmaWVsZHMgd2hpY2ggbWFwIHRvIGByZWFkb25seWAsIGBwcml2YXRlYCwgb3IgYHByb3RlY3RlZGAgbWVtYmVycyBpbiB0aGVcbiAgICogRGlyZWN0aXZlJ3MgY2xhc3MuXG4gICAqL1xuICByZXN0cmljdGVkSW5wdXRGaWVsZHM6IFNldDxDbGFzc1Byb3BlcnR5TmFtZT47XG5cbiAgLyoqXG4gICAqIFRoZSBzZXQgb2YgaW5wdXQgZmllbGRzIHdoaWNoIGFyZSBkZWNsYXJlZCBhcyBzdHJpbmcgbGl0ZXJhbCBtZW1iZXJzIGluIHRoZSBEaXJlY3RpdmUncyBjbGFzcy5cbiAgICogV2UgbmVlZCB0byB0cmFjayB0aGVzZSBzZXBhcmF0ZWx5IGJlY2F1c2UgdGhlc2UgZmllbGRzIG1heSBub3QgYmUgdmFsaWQgSlMgaWRlbnRpZmllcnMgc29cbiAgICogd2UgY2Fubm90IHVzZSB0aGVtIHdpdGggcHJvcGVydHkgYWNjZXNzIGV4cHJlc3Npb25zIHdoZW4gYXNzaWduaW5nIGlucHV0cy5cbiAgICovXG4gIHN0cmluZ0xpdGVyYWxJbnB1dEZpZWxkczogU2V0PENsYXNzUHJvcGVydHlOYW1lPjtcblxuICAvKipcbiAgICogVGhlIHNldCBvZiBpbnB1dCBmaWVsZHMgd2hpY2ggZG8gbm90IGhhdmUgY29ycmVzcG9uZGluZyBtZW1iZXJzIGluIHRoZSBEaXJlY3RpdmUncyBjbGFzcy5cbiAgICovXG4gIHVuZGVjbGFyZWRJbnB1dEZpZWxkczogU2V0PENsYXNzUHJvcGVydHlOYW1lPjtcblxuICAvKipcbiAgICogV2hldGhlciB0aGUgRGlyZWN0aXZlJ3MgY2xhc3MgaXMgZ2VuZXJpYywgaS5lLiBgY2xhc3MgTXlEaXI8VD4gey4uLn1gLlxuICAgKi9cbiAgaXNHZW5lcmljOiBib29sZWFuO1xufVxuXG5leHBvcnQgZW51bSBNZXRhVHlwZSB7XG4gIFBpcGUsXG4gIERpcmVjdGl2ZSxcbn1cblxuLyoqXG4gKiBNZXRhZGF0YSBjb2xsZWN0ZWQgZm9yIGEgZGlyZWN0aXZlIHdpdGhpbiBhbiBOZ01vZHVsZSdzIHNjb3BlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIERpcmVjdGl2ZU1ldGEgZXh0ZW5kcyBUMkRpcmVjdGl2ZU1ldGEsIERpcmVjdGl2ZVR5cGVDaGVja01ldGEge1xuICB0eXBlOiBNZXRhVHlwZS5EaXJlY3RpdmU7XG5cbiAgcmVmOiBSZWZlcmVuY2U8Q2xhc3NEZWNsYXJhdGlvbj47XG4gIC8qKlxuICAgKiBVbnBhcnNlZCBzZWxlY3RvciBvZiB0aGUgZGlyZWN0aXZlLCBvciBudWxsIGlmIHRoZSBkaXJlY3RpdmUgZG9lcyBub3QgaGF2ZSBhIHNlbGVjdG9yLlxuICAgKi9cbiAgc2VsZWN0b3I6IHN0cmluZ3xudWxsO1xuICBxdWVyaWVzOiBzdHJpbmdbXTtcblxuICAvKipcbiAgICogQSBtYXBwaW5nIG9mIGlucHV0IGZpZWxkIG5hbWVzIHRvIHRoZSBwcm9wZXJ0eSBuYW1lcy5cbiAgICovXG4gIGlucHV0czogQ2xhc3NQcm9wZXJ0eU1hcHBpbmc7XG5cbiAgLyoqXG4gICAqIEEgbWFwcGluZyBvZiBvdXRwdXQgZmllbGQgbmFtZXMgdG8gdGhlIHByb3BlcnR5IG5hbWVzLlxuICAgKi9cbiAgb3V0cHV0czogQ2xhc3NQcm9wZXJ0eU1hcHBpbmc7XG5cbiAgLyoqXG4gICAqIEEgYFJlZmVyZW5jZWAgdG8gdGhlIGJhc2UgY2xhc3MgZm9yIHRoZSBkaXJlY3RpdmUsIGlmIG9uZSB3YXMgZGV0ZWN0ZWQuXG4gICAqXG4gICAqIEEgdmFsdWUgb2YgYCdkeW5hbWljJ2AgaW5kaWNhdGVzIHRoYXQgd2hpbGUgdGhlIGFuYWx5emVyIGRldGVjdGVkIHRoYXQgdGhpcyBkaXJlY3RpdmUgZXh0ZW5kc1xuICAgKiBhbm90aGVyIHR5cGUsIGl0IGNvdWxkIG5vdCBzdGF0aWNhbGx5IGRldGVybWluZSB0aGUgYmFzZSBjbGFzcy5cbiAgICovXG4gIGJhc2VDbGFzczogUmVmZXJlbmNlPENsYXNzRGVjbGFyYXRpb24+fCdkeW5hbWljJ3xudWxsO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBkaXJlY3RpdmUgaGFkIHNvbWUgaXNzdWUgd2l0aCBpdHMgZGVjbGFyYXRpb24gdGhhdCBtZWFucyBpdCBtaWdodCBub3QgaGF2ZSBjb21wbGV0ZVxuICAgKiBhbmQgcmVsaWFibGUgbWV0YWRhdGEuXG4gICAqL1xuICBpc1BvaXNvbmVkOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBkaXJlY3RpdmUgaXMgbGlrZWx5IGEgc3RydWN0dXJhbCBkaXJlY3RpdmUgKGluamVjdHMgYFRlbXBsYXRlUmVmYCkuXG4gICAqL1xuICBpc1N0cnVjdHVyYWw6IGJvb2xlYW47XG59XG5cbi8qKlxuICogTWV0YWRhdGEgdGhhdCBkZXNjcmliZXMgYSB0ZW1wbGF0ZSBndWFyZCBmb3Igb25lIG9mIHRoZSBkaXJlY3RpdmUncyBpbnB1dHMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVGVtcGxhdGVHdWFyZE1ldGEge1xuICAvKipcbiAgICogVGhlIGlucHV0IG5hbWUgdGhhdCB0aGlzIGd1YXJkIHNob3VsZCBiZSBhcHBsaWVkIHRvLlxuICAgKi9cbiAgaW5wdXROYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFJlcHJlc2VudHMgdGhlIHR5cGUgb2YgdGhlIHRlbXBsYXRlIGd1YXJkLlxuICAgKlxuICAgKiAtICdpbnZvY2F0aW9uJyBtZWFucyB0aGF0IGEgY2FsbCB0byB0aGUgdGVtcGxhdGUgZ3VhcmQgZnVuY3Rpb24gaXMgZW1pdHRlZCBzbyB0aGF0IGl0cyByZXR1cm5cbiAgICogICB0eXBlIGNhbiByZXN1bHQgaW4gbmFycm93aW5nIG9mIHRoZSBpbnB1dCB0eXBlLlxuICAgKiAtICdiaW5kaW5nJyBtZWFucyB0aGF0IHRoZSBpbnB1dCBiaW5kaW5nIGV4cHJlc3Npb24gaXRzZWxmIGlzIHVzZWQgYXMgdGVtcGxhdGUgZ3VhcmQuXG4gICAqL1xuICB0eXBlOiAnaW52b2NhdGlvbid8J2JpbmRpbmcnO1xufVxuXG4vKipcbiAqIE1ldGFkYXRhIGZvciBhIHBpcGUgd2l0aGluIGFuIE5nTW9kdWxlJ3Mgc2NvcGUuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGlwZU1ldGEge1xuICB0eXBlOiBNZXRhVHlwZS5QaXBlO1xuICByZWY6IFJlZmVyZW5jZTxDbGFzc0RlY2xhcmF0aW9uPjtcbiAgbmFtZTogc3RyaW5nO1xuICBuYW1lRXhwcjogdHMuRXhwcmVzc2lvbnxudWxsO1xufVxuXG4vKipcbiAqIFJlYWRzIG1ldGFkYXRhIGZvciBkaXJlY3RpdmVzLCBwaXBlcywgYW5kIG1vZHVsZXMgZnJvbSBhIHBhcnRpY3VsYXIgc291cmNlLCBzdWNoIGFzIC5kLnRzIGZpbGVzXG4gKiBvciBhIHJlZ2lzdHJ5LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE1ldGFkYXRhUmVhZGVyIHtcbiAgZ2V0RGlyZWN0aXZlTWV0YWRhdGEobm9kZTogUmVmZXJlbmNlPENsYXNzRGVjbGFyYXRpb24+KTogRGlyZWN0aXZlTWV0YXxudWxsO1xuICBnZXROZ01vZHVsZU1ldGFkYXRhKG5vZGU6IFJlZmVyZW5jZTxDbGFzc0RlY2xhcmF0aW9uPik6IE5nTW9kdWxlTWV0YXxudWxsO1xuICBnZXRQaXBlTWV0YWRhdGEobm9kZTogUmVmZXJlbmNlPENsYXNzRGVjbGFyYXRpb24+KTogUGlwZU1ldGF8bnVsbDtcbn1cblxuLyoqXG4gKiBSZWdpc3RlcnMgbmV3IG1ldGFkYXRhIGZvciBkaXJlY3RpdmVzLCBwaXBlcywgYW5kIG1vZHVsZXMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTWV0YWRhdGFSZWdpc3RyeSB7XG4gIHJlZ2lzdGVyRGlyZWN0aXZlTWV0YWRhdGEobWV0YTogRGlyZWN0aXZlTWV0YSk6IHZvaWQ7XG4gIHJlZ2lzdGVyTmdNb2R1bGVNZXRhZGF0YShtZXRhOiBOZ01vZHVsZU1ldGEpOiB2b2lkO1xuICByZWdpc3RlclBpcGVNZXRhZGF0YShtZXRhOiBQaXBlTWV0YSk6IHZvaWQ7XG59XG4iXX0=