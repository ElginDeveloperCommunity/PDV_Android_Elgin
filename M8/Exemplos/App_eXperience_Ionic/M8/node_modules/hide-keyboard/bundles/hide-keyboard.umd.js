(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('hide-keyboard', ['exports', '@angular/core'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['hide-keyboard'] = {}, global.ng.core));
}(this, (function (exports, core) { 'use strict';

    var HideKeyboardDirective = /** @class */ (function () {
        function HideKeyboardDirective(el) {
            var _this = this;
            this.el = el;
            this.focusTimeout = 500;
            this.readonly = true;
            this.setReadOnly(this.readonly);
            setTimeout(function () {
                _this.el.nativeElement.focus();
            }, this.focusTimeout);
        }
        HideKeyboardDirective.prototype.onFocus = function () {
            var _this = this;
            this.readonly = true;
            this.setReadOnly(this.readonly);
            if (!this.readonly) {
                this.setReadOnly(!this.readonly);
            }
            setTimeout(function () {
                _this.readonly = false;
                _this.setReadOnly(_this.readonly);
            }, 100);
        };
        ;
        HideKeyboardDirective.prototype.onClick = function (input) {
            var _this = this;
            this.readonly = true;
            this.setReadOnly(this.readonly);
            setTimeout(function () {
                _this.readonly = false;
                _this.setReadOnly(_this.readonly);
                _this.el.nativeElement.focus();
            }, this.focusTimeout);
        };
        HideKeyboardDirective.prototype.setReadOnly = function (value) {
            this.el.nativeElement.readOnly = value;
            if (this.el.nativeElement.children && this.el.nativeElement.children.length > 0) {
                this.el.nativeElement.children[0].readOnly = value;
                if (this.el.nativeElement.children.length > 1) {
                    this.el.nativeElement.children[1].readOnly = value;
                }
            }
            ;
        };
        ;
        return HideKeyboardDirective;
    }());
    HideKeyboardDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[hideKeyboard]'
                },] }
    ];
    HideKeyboardDirective.ctorParameters = function () { return [
        { type: core.ElementRef }
    ]; };
    HideKeyboardDirective.propDecorators = {
        onFocus: [{ type: core.HostListener, args: ['focus',] }],
        onClick: [{ type: core.HostListener, args: ['click', ['$event.target'],] }]
    };

    var HideKeyboardModule = /** @class */ (function () {
        function HideKeyboardModule() {
        }
        HideKeyboardModule.forRoot = function () {
            return {
                ngModule: HideKeyboardModule,
                providers: []
            };
        };
        return HideKeyboardModule;
    }());
    HideKeyboardModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [HideKeyboardDirective],
                    exports: [HideKeyboardDirective]
                },] }
    ];

    /*
     * Public API Surface of hide-keyboard
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.HideKeyboardDirective = HideKeyboardDirective;
    exports.HideKeyboardModule = HideKeyboardModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=hide-keyboard.umd.js.map
