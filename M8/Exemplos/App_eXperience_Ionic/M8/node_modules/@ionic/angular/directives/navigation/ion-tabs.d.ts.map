{"version":3,"file":"ion-tabs.d.ts","sources":["ion-tabs.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter } from '@angular/core';\nimport { NavController } from '../../providers/nav-controller';\nimport { IonTabBar } from '../proxies';\nimport { IonRouterOutlet } from './ion-router-outlet';\nimport { StackEvent } from './stack-utils';\nexport declare class IonTabs {\n    private navCtrl;\n    outlet: IonRouterOutlet;\n    tabBar: IonTabBar | undefined;\n    ionTabsWillChange: EventEmitter<{\n        tab: string;\n    }>;\n    ionTabsDidChange: EventEmitter<{\n        tab: string;\n    }>;\n    constructor(navCtrl: NavController);\n    /**\n     * @internal\n     */\n    onPageSelected(detail: StackEvent): void;\n    /**\n     * When a tab button is clicked, there are several scenarios:\n     * 1. If the selected tab is currently active (the tab button has been clicked\n     *    again), then it should go to the root view for that tab.\n     *\n     *   a. Get the saved root view from the router outlet. If the saved root view\n     *      matches the tabRootUrl, set the route view to this view including the\n     *      navigation extras.\n     *   b. If the saved root view from the router outlet does\n     *      not match, navigate to the tabRootUrl. No navigation extras are\n     *      included.\n     *\n     * 2. If the current tab tab is not currently selected, get the last route\n     *    view from the router outlet.\n     *\n     *   a. If the last route view exists, navigate to that view including any\n     *      navigation extras\n     *   b. If the last route view doesn't exist, then navigate\n     *      to the default tabRootUrl\n     */\n    select(tab: string): Promise<boolean>;\n    getSelected(): string | undefined;\n}\n"]}