{"version":3,"file":"ion-router-outlet.d.ts","sources":["ion-router-outlet.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Location } from '@angular/common';\nimport { ComponentFactoryResolver, ComponentRef, ElementRef, EventEmitter, NgZone, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';\nimport { ActivatedRoute, ChildrenOutletContexts, OutletContext, Router } from '@angular/router';\nimport { AnimationBuilder } from '../../';\nimport { Config } from '../../providers/config';\nimport { NavController } from '../../providers/nav-controller';\nimport { RouteView } from './stack-utils';\nexport declare class IonRouterOutlet implements OnDestroy, OnInit {\n    private parentContexts;\n    private location;\n    private resolver;\n    private config;\n    private navCtrl;\n    readonly parentOutlet?: IonRouterOutlet;\n    nativeEl: HTMLIonRouterOutletElement;\n    private activated;\n    activatedView: RouteView | null;\n    private _activatedRoute;\n    private _swipeGesture?;\n    private name;\n    private stackCtrl;\n    private proxyMap;\n    private currentActivatedRoute$;\n    tabsPrefix: string | undefined;\n    stackEvents: EventEmitter<any>;\n    activateEvents: EventEmitter<any>;\n    deactivateEvents: EventEmitter<any>;\n    animation: AnimationBuilder;\n    animated: boolean;\n    swipeGesture: boolean;\n    constructor(parentContexts: ChildrenOutletContexts, location: ViewContainerRef, resolver: ComponentFactoryResolver, name: string, tabs: string, config: Config, navCtrl: NavController, commonLocation: Location, elementRef: ElementRef, router: Router, zone: NgZone, activatedRoute: ActivatedRoute, parentOutlet?: IonRouterOutlet);\n    ngOnDestroy(): void;\n    getContext(): OutletContext | null;\n    ngOnInit(): void;\n    readonly isActivated: boolean;\n    readonly component: object;\n    readonly activatedRoute: ActivatedRoute;\n    readonly activatedRouteData: any;\n    /**\n     * Called when the `RouteReuseStrategy` instructs to detach the subtree\n     */\n    detach(): ComponentRef<any>;\n    /**\n     * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree\n     */\n    attach(_ref: ComponentRef<any>, _activatedRoute: ActivatedRoute): void;\n    deactivate(): void;\n    activateWith(activatedRoute: ActivatedRoute, resolver: ComponentFactoryResolver | null): void;\n    /**\n     * Returns `true` if there are pages in the stack to go back.\n     */\n    canGoBack(deep?: number, stackId?: string): boolean;\n    /**\n     * Resolves to `true` if it the outlet was able to sucessfully pop the last N pages.\n     */\n    pop(deep?: number, stackId?: string): Promise<boolean>;\n    /**\n     * Returns the URL of the active page of each stack.\n     */\n    getLastUrl(stackId?: string): string | undefined;\n    /**\n     * Returns the RouteView of the active page of each stack.\n     * @internal\n     */\n    getLastRouteView(stackId?: string): RouteView | undefined;\n    /**\n     * Returns the root view in the tab stack.\n     * @internal\n     */\n    getRootView(stackId?: string): RouteView | undefined;\n    /**\n     * Returns the active stack ID. In the context of ion-tabs, it means the active tab.\n     */\n    getActiveStackId(): string | undefined;\n    /**\n     * Since the activated route can change over the life time of a component in an ion router outlet, we create\n     * a proxy so that we can update the values over time as a user navigates back to components already in the stack.\n     */\n    private createActivatedRouteProxy;\n    /**\n     * Create a wrapped observable that will switch to the latest activated route matched by the given component\n     */\n    private proxyObservable;\n    /**\n     * Updates the activated route proxy for the given component to the new incoming router state\n     */\n    private updateActivatedRouteProxy;\n}\n"]}